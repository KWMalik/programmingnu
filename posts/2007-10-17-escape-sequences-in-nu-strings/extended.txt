
## Supported sequences

These escape sequences are supported:
<table>
<tr><td> \n </td><td> newline (0x0a) </td></tr>
<tr><td> \r </td><td> carriage return (0x0d) </td></tr>
<tr><td> \f </td><td> formfeed (0x0c) </td></tr>
<tr><td> \b </td><td> backspace (0x08) </td></tr>
<tr><td> \a </td><td> bell (0x07) </td></tr>
<tr><td> \e </td><td> escape (0x1b) </td></tr>
<tr><td> \s </td><td> space (0x20) </td></tr>
<tr><td> \nnn </td><td> octal byte </td></tr>
<tr><td> \xnn </td><td> hexadecimal byte </td></tr>
<tr><td> \unnnn </td><td> unicode character (16 bits) </td></tr>
<tr><td> \x </td><td> character x </td></tr>
</table>

## Controlling escaping

Escape sequences are supported in both double-quoted and here strings.  Double-quoted strings are escaped by default.  For example, <code>"foo\nbar"</code> is parsed as a seven-character string with a newline in the middle.

Strings that are prefixed with a minus sign (-) explicitly
disable escaping.  For example, <code>-"foo\nbar"</code> is parsed as an eight character string with a slash and 'n' in the middle.

Strings that are prefixed with a plus sign (+) explicitly
enable escaping.  For example, <code>+"foo\nbar"</code> is parsed as a seven-character string with a newline in the middle.

<p/><p/>

Here strings that begin with the "<<-" notation explicitly
disable escaping. The following example shows an unescaped
string:
<pre>
(set x <<-END
foo\nbarEND)
</pre>

Here strings that begin with the new "<<+" notation explicitly
enable escaping.  The following example shows an escaped
string:
<pre>
(set x <<+END
foo\nbarEND)
</pre>

There is no ambiguous form for here strings.

## Unsupported sequences

These sequences were considered but are currently not supported:
<table>
<tr><td> \cx, \C-x </td><td> control-x </td></tr>
<tr><td> \M-x </td><td> meta-x (c + 0x80) </td></tr>
<tr><td> \M-\C-x </td><td> Meta-Control-x </td></tr>
</table>